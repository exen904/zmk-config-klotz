//              █         ██        ▄▀▀▀▀▀▀▀▀▀▀█▀▀▀▀▀▀▀▀█▀▀▀▀▀▀▀▀▀▀█
//              █        █ █      ▄▀            ▀▄      █         █
//              █       █  █    ▄▀                ▀▄    █        █
//              █      █   █   █                    █   █       █
//              █     █    █   █                    █   █      █
//              █    █     █   █                    █   █  ▀▀▀█▀▀▀▀
//              █   █ █    █   █                    █   █    █
//              █  █   █   █   █                    █   █   █
//              █ █     █  █    ▀▄                ▄▀    █  █
//              ██       █ █      ▀▄            ▄▀      █ █
//              █         ██▄▄▄▄▄▄▄▄█▄▄▄▄▄▄▄▄▄▄▀        ██▄▄▄▄▄▄▄▄▄▄
//
//▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//
//
/* ╭────┬────┬────┬────┬────╮ ⌄        ⌄ ╭────┬────┬────┬────┬────╮
   │  0 │  1 │  2 │  3 │  4 │ │  ⌁⌁⌁⌁   │ │  5 │  6 │  7 │  8 │  9 │
   ├────┼────┼────┼────┼────┼─╯        ╰─┼────┼────┼────┼────┼────┤
   │ 10 │ 11 │ 12 │ 13 │ 14 │╭───╮  ╭───╮│ 15 │ 16 │ 17 │ 18 │ 19 │
   ├────┼────┼────┼────┼────┤│ROT│  │ROT│├────┼────┼────┼────┼────┤
   │ 20 │ 21 │ 22 │ 23 │ 24 │╰───╯  ╰───╯│ 25 │ 26 │ 27 │ 28 │ 29 │
   ╰────┴────┴─────────┼────┼────╮  ╭────┼────┼────┼────┴────┴────╯
                       │ 30 │ 31 │  │ 32 │ 33 │
                       ╰────┴────╯  ╰────┴────╯ */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define TAPPING_TERM_TIME 175
#define QUICK_TAP_TIME 200
#define IDLE_MOD_TIME 200

// LAYERS ├────────────────────────────────────────────┐

#define BAS 0
#define SYM 1
#define NUM 2
#define NAV 3
#define ADJ 4

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };
};

// LAYER-TAP KEYS ├────────────────────────────────────────────┐

#define NUM_ENT &my_lt NUM ENTER
#define SYM_SPC &my_lt SYM SPACE
#define NAV_TAB &my_lt NAV TAB
#define NAV_BSP &my_lt_bspc NAV 0

&caps_word { continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>; };

/ {
};

#define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};

/ {
    combos {
        compatible = "zmk,combos";

        COMBO(esc, &kp ESC, 13 16, 75)
        COMBO(caps, &caps_word, 10 19, 75)
        COMBO(capslock, &kp CAPSLOCK, 0 9, 75)

        // In the number cluster

        COMBO(singlequote, &kp SINGLE_QUOTE, 6 7, 50)
        COMBO(doublequote, &kp DOUBLE_QUOTES, 7 8, 50)
        COMBO(minus, &kp MINUS, 17 18, 50)
        COMBO(plus, &kp PLUS, 16 17, 50)
        COMBO(equal, &kp EQUAL, 27 28, 50)
        COMBO(star, &kp ASTERISK, 26 27, 50)
        COMBO(underscore, &kp UNDERSCORE, 16 17 18, 50)

        qw-combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };
    };
};

/ {
    behaviors {
        colsem: colon_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "inverted colon/semicolon";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "backspace and shift delete";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_TIME>;
            quick-tap-ms = <QUICK_TAP_TIME>;
            require-prior-idle-ms = <IDLE_MOD_TIME>;

            // global-quick-tap;

            bindings = <&kp>, <&kp>;

            // opposite side hand keys

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
        };

        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_TIME>;
            quick-tap-ms = <QUICK_TAP_TIME>;
            require-prior-idle-ms = <IDLE_MOD_TIME>;

            // global-quick-tap;

            bindings = <&kp>, <&kp>;

            // opposite side hand keys

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
        };

        my_lt: my_layer_taps {
            compatible = "zmk,behavior-hold-tap";
            label = "my layer taps";
            #binding-cells = <2>;

            // flavor = "tap-preferred";

            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_TIME>;
            quick-tap-ms = <QUICK_TAP_TIME>;
            require-prior-idle-ms = <IDLE_MOD_TIME>;

            // global-quick-tap;

            bindings = <&mo>, <&kp>;

            // non-thumb keys
            /* hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23>; */
        };

        my_lt_bspc: my_layer_tap_bspc_del {
            compatible = "zmk,behavior-hold-tap";
            label = "my layer taps backspace";
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_TIME>;
            quick-tap-ms = <QUICK_TAP_TIME>;
            require-prior-idle-ms = <IDLE_MOD_TIME>;
            bindings = <&mo>, <&bspc_del>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        /*  ┌───────────────────────────────────────────────────────────┐
            │ q w e r t y                                               │
            └───────────────────────────────────────────────────────────┘
            ╭───────────┬───────────┬───────────┬───────────┬───────────╮ ⌄                    ⌄ ╭───────────┬───────────┬───────────┬───────────┬───────────╮
            │     Q     │     W     │     E     │     R     │     T     │ │     ⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁     │ │     Y     │     U     │     I     │     O     │     P     │
            ├───────────┼───────────┼───────────┼───────────┼───────────┼─╯                    ╰─┼───────────┼───────────┼───────────┼───────────┼───────────┤
            │   A/ALT   │   S/GUI   │  D/CTRL   │  F/SHIFT  │     G     │╭──────────╮╭──────────╮│     H     │  J/SHIFT  │  K/CTRL   │   L/GUI   │   :/ALT   │
            ├───────────┼───────────┼───────────┼───────────┼───────────┤│          ││          │├───────────┼───────────┼───────────┼───────────┼───────────┤
            │     Z     │     X     │     C     │     V     │     B     │╰──────────╯╰──────────╯│     N     │     M     │     ,     │     .     │     /     │
            ╰───────────┴───────────┴───────────┴───────────┼───────────┼───────────╮╭───────────┼───────────┼───────────┴───────────┴───────────┴───────────╯
                                                            │  Tab/NAV  │ Enter/NUM ││ Space/SYM │  Esc/NAV  │
                                                            ╰───────────┴───────────╯╰───────────┴───────────╯ */

        qwerty {
            label = "QWERTY";
            bindings = <
&kp Q       &kp W           &kp E        &kp R        &kp T      &kp Y      &kp U        &kp I        &kp O       &kp P
&hl LGUI A  &hl LEFT_ALT S  &hl LCTRL D  &hl LSHFT F  &kp G      &kp H      &hr RSHFT J  &hr RCTRL K  &hr RGUI L  &hr RALT COLON
&kp Z       &kp X           &kp C        &kp V        &kp B      &kp N      &kp M        &kp COMMA    &kp DOT     &kp SLASH
                                         &lt 1 TAB    &kp SPACE  &lt 2 RET  &kp BSPC
            >;

            sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        /*  ┌───────────────────────────────────────────────────────────┐
            │ s y m b o l s                                             │
            └───────────────────────────────────────────────────────────┘
            ╭───────────┬───────────┬───────────┬───────────┬───────────╮ ⌄                    ⌄ ╭───────────┬───────────┬───────────┬───────────┬───────────╮
            │     ~     │     `     │           │     ^     │           │ │     ⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁       │ │           │           │           │           │           │
            ├───────────┼───────────┼───────────┼───────────┼───────────┼─╯                    ╰─┼───────────┼───────────┼───────────┼───────────┼───────────┤
            │     !     │     @     │     #     │     $     │     %     │╭──────────╮╭──────────╮│           │           │           │           │           │
            ├───────────┼───────────┼───────────┼───────────┼───────────┤│          ││          │├───────────┼───────────┼───────────┼───────────┼───────────┤
            │           │           │     |     │     &     │           │╰──────────╯╰──────────╯│           │           │           │           │           │
            ╰───────────┴───────────┴───────────┴───────────┼───────────┼───────────╮╭───────────┼───────────┼───────────┴───────────┴───────────┴───────────╯
                                                            │           │           ││           │           │
                                                            ╰───────────┴───────────╯╰───────────┴───────────╯ */

        numbers {
            label = "NUM";
            bindings = <
&kp ESC         &kp PIPE        &kp UP_ARROW    &kp CARET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp N7         &kp N8        &kp N9        &kp PLUS
&kp LEFT_SHIFT  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp NUMBER_4   &kp N5        &kp NUMBER_6  &kp MINUS
&kp DELETE      &kp PG_UP       &kp CAPSLOCK    &kp PG_DN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3  &kp KP_ASTERISK
                                                &trans     &trans                &kp NUMBER_0           &kp BACKSLASH
            >;

            sensor-bindings = <&inc_dec_kp MINUS PLUS &inc_dec_kp RIGHT LEFT>;
        };

        /*  ┌───────────────────────────────────────────────────────────┐
            │ n u m b e r s                                             │
            └───────────────────────────────────────────────────────────┘
            ╭───────────┬───────────┬───────────┬───────────┬───────────╮ ⌄                    ⌄ ╭───────────┬───────────┬───────────┬───────────┬───────────╮
            │    F1     │    F2     │    F3     │    F4     │    F5     │ │     ⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁     │ │     [     │     7     │     8     │     9     │     ]     │
            ├───────────┼───────────┼───────────┼───────────┼───────────┼─╯                    ╰─┼───────────┼───────────┼───────────┼───────────┼───────────┤
            │    F6     │    F7     │    F8     │    F9     │    F10    │╭──────────╮╭──────────╮│     (     │     4     │     5     │     6     │     )     │
            ├───────────┼───────────┼───────────┼───────────┼───────────┤│          ││          │├───────────┼───────────┼───────────┼───────────┼───────────┤
            │           │           │           │    F11    │    F12    │╰──────────╯╰──────────╯│     {     │     1     │     2     │     3     │     }     │
            ╰───────────┴───────────┴───────────┴───────────┼───────────┼───────────╮╭───────────┼───────────┼───────────┴───────────┴───────────┴───────────╯
                                                            │           │           ││     \     │     0     │
                                                            ╰───────────┴───────────╯╰───────────┴───────────╯ */

        symbols {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH          &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPS  &kp RA(U)         &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES
&kp RA(A)        &trans       &kp RA(NUMBER_5)  &trans      &trans       &trans     &trans    &kp RA(NUMBER_5)  &trans            &trans
&trans           &trans       &trans            &trans      &trans       &trans     &trans    &trans            &trans            &kp BACKSLASH
                                                &trans      &mo 3        &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN  &inc_dec_kp LC(A) LC(X)>;
        };

        /*  ┌───────────────────────────────────────────────────────────┐
            │ n a v i g a t i o n                                       │
            └───────────────────────────────────────────────────────────┘
            ╭───────────┬───────────┬───────────┬───────────┬───────────╮ ⌄                    ⌄ ╭───────────┬───────────┬───────────┬───────────┬───────────╮
            │           │           │     €     │           │           │ │     ⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁     │ │           │     Ü     │           │     Ö     │           │
            ├───────────┼───────────┼───────────┼───────────┼───────────┼─╯                    ╰─┼───────────┼───────────┼───────────┼───────────┼───────────┤
            │     Ä     │     ß     │           │  OSM SFT  │           │╭──────────╮╭──────────╮│     ←     │     ↓     │     ↑     │     →     │           │
            ├───────────┼───────────┼───────────┼───────────┼───────────┤│          ││          │├───────────┼───────────┼───────────┼───────────┼───────────┤
            │           │           │           │           │           │╰──────────╯╰──────────╯│           │           │           │           │           │
            ╰───────────┴───────────┴───────────┴───────────┼───────────┼───────────╮╭───────────┼───────────┼───────────┴───────────┴───────────┴───────────╯
                                                            │           │           ││           │           │
                                                            ╰───────────┴───────────╯╰───────────┴───────────╯ */
        /*  ┌───────────────────────────────────────────────────────────┐
            │ a d j u s t                                               │
            └───────────────────────────────────────────────────────────┘
            ╭───────────┬───────────┬───────────┬───────────┬───────────╮ ⌄                    ⌄ ╭───────────┬───────────┬───────────┬───────────┬───────────╮
            │   Reset   │           │           │Tap. Term ↑│           │ │     ⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁       │ │           │     Ü     │           │     Ö     │           │
            ├───────────┼───────────┼───────────┼───────────┼───────────┼─╯                    ╰─┼───────────┼───────────┼───────────┼───────────┼───────────┤
            │Bootloader │           │           │Print TapT.│           │╭──────────╮╭──────────╮│     ←     │     ↓     │     ↑     │     →     │           │
            ├───────────┼───────────┼───────────┼───────────┼───────────┤│          ││          │├───────────┼───────────┼───────────┼───────────┼───────────┤
            │Make Keymap│           │           │Tap. Term ↓│           │╰──────────╯╰──────────╯│           │           │           │           │           │
            ╰───────────┴───────────┴───────────┴───────────┼───────────┼───────────╮╭───────────┼───────────┼───────────┴───────────┴───────────┴───────────╯
                                                            │           │           ││           │           │
                                                            ╰───────────┴───────────╯╰───────────┴───────────╯ */

        function {
            label = "ADJ";
            bindings = <
&sys_reset   &bt BT_CLR  &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &trans  &trans  &trans
&bootloader  &bt BT_NXT  &none         &bt BT_SEL 2  &bt BT_SEL 3  &none   &none   &none   &none   &none
&trans       &bt BT_PRV  &bl BL_TOG    &bl BL_INC    &bl BL_DEC    &none   &none   &none   &none   &tog 4
                                       &trans        &trans        &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN  &inc_dec_kp RIGHT LEFT>;
        };

        Gaming {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E   &kp R      &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp A  &kp S  &kp D   &kp F      &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp Z  &kp X  &kp C   &kp V      &trans  &trans  &trans  &trans  &tog 4
                         &trans  &kp SPACE  &trans  &trans
            >;
        };
    };
};
